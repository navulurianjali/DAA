import heapq

class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

def mergeKLists(lists):
    dummy = ListNode(0)
    current = dummy
    heap = []

    for i in range(len(lists)):
        if lists[i] is not None:
            heapq.heappush(heap, (lists[i].val, i))
            lists[i] = lists[i].next

    while heap:
        val, i = heapq.heappop(heap)
        current.next = ListNode(val)
        current = current.next

        if lists[i] is not None:
            heapq.heappush(heap, (lists[i].val, i))
            lists[i] = lists[i].next

    return dummy.next

lists = [
    ListNode(1),
    ListNode(1),
    ListNode(2)
]

lists[0].next = ListNode(4)
lists[0].next.next = ListNode(5)

lists[1].next = ListNode(3)
lists[1].next.next = ListNode(4)

lists[2].next = ListNode(6)

result = mergeKLists(lists)
while result:
    print(result.val, end=" ")
    result = result.next

