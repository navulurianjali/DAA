import heapq
from collections import defaultdict

def dijkstra_edge_list(n, edges, source, target):
    graph = defaultdict(list)
    for u, v, w in edges:
        graph[u].append((v, w))
        graph[v].append((u, w)) 
    dist = {node: float('inf') for node in range(n)}
    dist[source] = 0
    pq = [(0, source)]  
    while pq:
        curr_dist, u = heapq.heappop(pq)
        
        if u == target:
            return curr_dist
        
        if curr_dist > dist[u]:
            continue
        
        for v, weight in graph[u]:
            new_dist = curr_dist + weight
            if new_dist < dist[v]:
                dist[v] = new_dist
                heapq.heappush(pq, (new_dist, v))
    
    return float('inf')  
n = 6
edges = [
    (0, 1, 7), (0, 2, 9), (0, 5, 14),
    (1, 2, 10), (1, 3, 15), (2, 3, 11), (2, 5, 2),
    (3, 4, 6), (4, 5, 9)
]
source = 0
target = 4
print(dijkstra_edge_list(n, edges, source, target))
