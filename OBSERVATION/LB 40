class TreeNode:
    def _init_(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
def bst_from_preorder(preorder):
    def helper(lower=float('-inf'), upper=float('inf')):
        nonlocal idx
        if idx == len(preorder):
            return None
        val = preorder[idx]
        if val < lower or val > upper:
            return None       
        idx += 1
        root = TreeNode(val)
        root.left = helper(lower, val)
        root.right = helper(val, upper)
        return root
    
    idx = 0
    return helper()

# Function to print tree in inorder (used for testing)
def print_inorder(node):
    if node:
        print_inorder(node.left)
        print(node.val, end=' ')
        print_inorder(node.right)

# Test cases
preorder1 = [8, 5, 1, 7, 10, 12]
preorder2 = [10, 5, 1, 7, 40, 50]

bst1 = bst_from_preorder(preorder1)
bst2 = bst_from_preorder(preorder2)

print("Inorder traversal of BST from preorder1:")
print_inorder(bst1)  # Output: 1 5 7 8 10 12

print("\nInorder traversal of BST from preorder2:")
print_inorder(bst2)  # Output: 1 5 7 10 40 50
