import heapq

def min_cost_to_buy_apples(n, roads, apple_cost, k):
    def dijkstra(start):
        dist = [float('inf')] * n
        dist[start] = 0
        pq = [(0, start)]
        while pq:
            current_dist, u = heapq.heappop(pq)
            if current_dist > dist[u]:
                continue
            for v, cost in graph[u]:
                new_dist = current_dist + cost
                if new_dist < dist[v]:
                    dist[v] = new_dist
                    heapq.heappush(pq, (new_dist, v))
        return dist
    
    graph = [[] for _ in range(n)]
    for u, v, cost in roads:
        graph[u-1].append((v-1, cost))
        graph[v-1].append((u-1, cost))
    
    min_costs = []
    for i in range(n):
        dist = dijkstra(i)
        min_cost = min(dist[j] + apple_cost[j] + dist[j] * k for j in range(n))
        min_costs.append(min_cost)
    
    return min_costs
n = 4
roads = [[1, 2, 4], [2, 3, 2], [2, 4, 5], [3, 4, 1], [1, 3, 4]]
apple_cost = [36, 41, 100, 301]
k = 2
print(min_cost_to_buy_apples(n, roads, apple_cost, k)) 
