from collections import deque
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
def min_operations_to_sort_levels(root):
    def bfs_levels(root):
        levels = []
        q = deque([root])
        while q:
            level_size = len(q)
            level = []
            for _ in range(level_size):
                node = q.popleft()
                level.append(node.val)
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
            levels.append(level)
        return levels

    levels = bfs_levels(root)
    operations = 0
    
    for level in levels:
        sorted_level = sorted(level)
        for i in range(len(level)):
            if level[i] != sorted_level[i]:
                idx = level.index(sorted_level[i])
                level[i], level[idx] = level[idx], level[i]
                operations += 1
    return operations
root = TreeNode(156)
root.left = TreeNode(14)
root.right = TreeNode(30)
root.left.left = TreeNode(27)
root.left.right = TreeNode(16)
root.right.left = TreeNode(82)
root.right.right = TreeNode(15)
print(min_operations_to_sort_levels(root)) 
