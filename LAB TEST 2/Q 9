def meet_in_middle(arr, S):
    n = len(arr)
    max_sum = 0

    sums1 = set()
    for i in range(1 << (n // 2)):
        curr_sum = 0
        for j in range(n // 2):
            if (i & (1 << j)) > 0:
                curr_sum += arr[j]
        sums1.add(curr_sum)

    sums2 = set()
    for i in range(1 << (n - n // 2)):
        curr_sum = 0
        for j in range(n - n // 2):
            if (i & (1 << j)) > 0:
                curr_sum += arr[n // 2 + j]
        sums2.add(curr_sum)

    for sum1 in sums1:
        for sum2 in sums2:
            if sum1 + sum2 <= S:
                max_sum = max(max_sum, sum1 + sum2)

    return max_sum

arr = [45, 34, 4, 12, 5, 2]
S = 42
result = meet_in_middle(arr, S)
print(f"The maximum sum subset having sum less than or equal to {S} is {result}")
