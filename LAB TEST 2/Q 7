import math

def distance(p1, p2):
    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)

def closest_pair_divide_conquer(points):
    if len(points) <= 3:
        min_dist = float('inf')
        for i in range(len(points)):
            for j in range(i+1, len(points)):
                dist = distance(points[i], points[j])
                if dist < min_dist:
                    min_dist = dist
        return min_dist

    mid = len(points) // 2
    left_points = points[:mid]
    right_points = points[mid:]

    left_dist = closest_pair_divide_conquer(left_points)
    right_dist = closest_pair_divide_conquer(right_points)
    dist = min(left_dist, right_dist)

    strip = [p for p in points if abs(p[0] - points[mid][0]) < dist]
    strip.sort(key=lambda p: p[1])

    for i in range(len(strip)-1):
        for j in range(i+1, min(len(strip), i+8)):
            dist = distance(strip[i], strip[j])
            if dist < dist:
                dist = dist

    return dist

points = [(1, 2), (3, 4), (0, 0), (5, 6), (7, 8), (9, 10), (2, 3), (4, 5)]
result = closest_pair_divide_conquer(points)
print(f"The closest pair of points has a distance of {result}")
