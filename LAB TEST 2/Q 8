def partition(arr, low, high):
    pivot = arr[low]
    i = low + 1
    j = high

    while True:
        while i <= j and arr[i] <= pivot:
            i = i + 1
        while i <= j and arr[j] >= pivot:
            j = j - 1
        if i <= j:
            arr[i], arr[j] = arr[j], arr[i]
        else:
            arr[low], arr[j] = arr[j], arr[low]
            return j

def quickselect(arr, k):
    if len(arr) == 1:
        return arr[0]

    pivot_index = partition(arr, 0, len(arr) - 1)

    if k == pivot_index:
        return arr[k]
    elif k < pivot_index:
        return quickselect(arr[:pivot_index], k)
    else:
        return quickselect(arr[pivot_index + 1:], k - pivot_index - 1)

def median_of_medians(arr):
    n = len(arr)
    return quickselect(arr, n // 2)

arr = [3, 5, 2, 7, 1, 4, 8, 6]
result = median_of_medians(arr)
print(f"The median of medians is {result}")
